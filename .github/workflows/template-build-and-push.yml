---
name: Docker Image Build and Push [template]

"on":
  workflow_call:
    inputs:
      is_release:
        description: >
          Build for release (runner stage) or development
          (developer stage with -developer suffix)
        required: false
        type: boolean
        default: false
      tags:
        description: >
          Additional comma-separated tags to apply to the image
          (e.g., "latest,v1.0.0")
        required: false
        type: string
        default: ''
      registry:
        description: 'The container registry to push to'
        required: false
        type: string
        default: 'ghcr.io'
      image_name:
        description: 'The name of the docker image'
        required: false
        type: string
        default: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Builds
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          flavor: |
            latest=false
          tags: |
            type=sha,format=long,prefix='',suffix=${{ !inputs.is_release && '-developer' || '' }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/python/Dockerfile
          push: true
          target: ${{ inputs.is_release && 'runner' || 'developer' }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ inputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
